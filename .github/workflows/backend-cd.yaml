name: cd-backend-workflow

on:
  # Manual trigger using the workflow_dispatch event
  workflow_dispatch:

  # Automatic trigger on push events targeting the main branch
  push:
    branches:
      - main
      
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint: 
    runs-on: ubuntu-latest
    steps:
      # Check out the code from the repository.
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up a python environment.
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"
          cache: "pipenv"

      # Set up pipenv.
      - name: Set up Pipenv
        uses: tiagovrtr/actions-pipenv@v1
        with:
          pipenv-version: "v2024.0.1"

      # Install flake8
      - name: Install flake8
        run: pip install flake8

      # Install the dependencies.
      - name: Install dependencies
        run: cd starter/backend && pipenv install

      # Run the linter.
      - name: Python Linter
        run: cd starter/backend && pipenv run lint
  
  test:
    runs-on: ubuntu-latest
    steps:
      # Check out the code from the repository.
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up a python environment.
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"
          cache: "pipenv"

      # Set up pipenv.
      - name: Set up Pipenv
        uses: tiagovrtr/actions-pipenv@v1
        with:
          pipenv-version: "v2024.0.1"

      # Install the dependencies.
      - name: Install dependencies
        run: cd starter/backend && pipenv install

      # Run the tests.
      - name: Running test
        run: cd starter/backend && pipenv run test
        
  build-and-push:
        runs-on: ubuntu-latest
        needs: [lint, test]
        steps:
        - name: Checkout repo
          uses: actions/checkout@v4
    
        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v2
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-session-token: ${{secrets.AWS_SESSION_TOKEN}}
            aws-region: us-east-1
            #role-to-assume: arn:aws:iam::860491643728:role/my-github-actions-role
        
        - name: Login to Amazon ECR Public
          id: login-ecr-public
          uses: aws-actions/amazon-ecr-login@v2
          with:
            registry-type: public
            
        - name: Build, tag, and push docker image to Amazon ECR Public
          env:
            REGISTRY: ${{ steps.login-ecr-public.outputs.registry }}
            REGISTRY_ALIAS: my-ecr-public-registry-alias
            REPOSITORY: my-ecr-public-repo
            IMAGE_TAG: ${{ github.sha }}
          run: |
            docker build -t $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE_TAG .
            docker push $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE_TAG
    
  deploy:
    name: 'Using Terraform'
    runs-on: ubuntu-latest
  
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{secrets.AWS_SESSION_TOKEN}}
          aws-region: us-east-1
  
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
  
      - name: Terraform Initialize
        run: terraform init
  
      - name: Terraform Validate
        run: terraform validate 
  
      - name: Terraform Plan
        run: terraform plan 
        continue-on-error: true
  
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve
  
      - name: Terraform Destroy
        run:  terraform plan -destroy
