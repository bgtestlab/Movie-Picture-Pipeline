name: cd-backend-workflow

on:
  # Manual trigger using the workflow_dispatch event
  workflow_dispatch:

  # Automatic trigger on push events targeting the main branch
  push:
    branches:
      - main
      
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint: 
    runs-on: ubuntu-latest
    steps:
      # Check out the code from the repository.
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up a python environment.
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"
          cache: "pipenv"

      # Set up pipenv.
      - name: Set up Pipenv
        uses: tiagovrtr/actions-pipenv@v1
        with:
          pipenv-version: "v2024.0.1"

      # Install flake8
      - name: Install flake8
        run: pip install flake8

      # Install the dependencies.
      - name: Install dependencies
        run: cd starter/backend && pipenv install

      # Run the linter.
      - name: Python Linter
        run: cd starter/backend && pipenv run lint
  
  test:
    runs-on: ubuntu-latest
    steps:
      # Check out the code from the repository.
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up a python environment.
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"
          cache: "pipenv"

      # Set up pipenv.
      - name: Set up Pipenv
        uses: tiagovrtr/actions-pipenv@v1
        with:
          pipenv-version: "v2024.0.1"

      # Install the dependencies.
      - name: Install dependencies
        run: cd starter/backend && pipenv install

      # Run the tests.
      - name: Running test
        run: cd starter/backend && pipenv run test
        
  build-and-push:
        runs-on: ubuntu-latest
        needs: [lint, test]
        steps:
        - name: Checkout repo
          uses: actions/checkout@v4
    
        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v2
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-session-token: ${{secrets.AWS_SESSION_TOKEN}}
            aws-region: us-east-1
        
        - name: Login to Amazon ECR
          id: login-ecr
          uses: aws-actions/amazon-ecr-login@v2
          with:
            registries: ${{ vars.AWS_ACCOUNT_ID }}
            
        - name: Build, tag, and push docker image to Amazon ECR 
          env:
            REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            REPOSITORY: "movie-picture-backend"
            IMAGE_TAG: ${{ github.sha }}
          run: |
            cd starter/backend
            docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
            docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
    
  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      # Make sure you're kubeconfig is configured for the EKS cluster
      - name: Update a kubeconfig file
        env:
          AWS_EKS_CLUSTER_NAME: "movie-picture"
        run: |
          aws sts get-caller-identity
          aws eks update-kubeconfig --region "us-east-1" --name $AWS_EKS_CLUSTER_NAME
          kubectl config current-context
          kubectl get svc
      
      # Login to Amazon ECR Private
      - name: Login to Amazon ECR
        id: login-ecr-deploy
        uses: aws-actions/amazon-ecr-login@v2
      
      # Apply the manifests to the cluster
      - name: Apply the manifests to the cluster
        env:
          ECR_REGISTRY: ${{ steps.login-ecr-deploy.outputs.registry }}
          ECR_REPOSITORY: "movie-picture-backend"
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd ./starter/backend/k8s
          kustomize edit set image backend=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          kustomize build | kubectl apply -f -
