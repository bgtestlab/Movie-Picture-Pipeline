name: cd-frontend-workflow

on:
  # Manual trigger using the workflow_dispatch event
  workflow_dispatch:

  # Automatic trigger on push events targeting the main branch
  push:
    branches:
      - main
      
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint: 
    runs-on: ubuntu-latest
    steps:
      # Check out the code from the repository.
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up a Node.js environment with caching.
      - name: Set up Node.js 
        uses: actions/setup-node@v4
        with:
          node-version: latest
          cache: 'npm'
          cache-dependency-path: './starter/frontend/package-lock.json'

      # Install the dependencies.
      - name: Install dependencies
        run: cd starter/frontend && npm ci

      # Run the linter.
      - name: Running linter
        run: cd starter/frontend && npm run lint
  
  test:
    runs-on: ubuntu-latest
    steps:
      # Check out the code from the repository.
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up a Node.js environment with caching.
      - name: Set up Node.js 
        uses: actions/setup-node@v4
        with:
          node-version: latest
          cache: 'npm'
          cache-dependency-path: './starter/frontend/package-lock.json'

      # Install the dependencies.
      - name: Install dependencies
        run: cd starter/frontend && npm ci

      # Run the tests.
      - name: Running test
        run: cd starter/frontend && npm run test

  build-and-push:
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
    - name: Checkout repo
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{secrets.AWS_SESSION_TOKEN}}
        aws-region: us-east-1
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      with:
        registries: ${{ vars.AWS_ACCOUNT_ID }}
        
    - name: Build, tag, and push docker image to Amazon ECR
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        REPOSITORY: "movie-picture-frontend"
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd starter/frontend
        docker build --build-arg=REACT_APP_MOVIE_API_URL=${{ vars.APP_MOVIE_API_URL }} \
                    -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
        docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
    
  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{secrets.AWS_SESSION_TOKEN}}
          aws-region: us-east-1   

      # Make sure you're kubeconfig is configured for the EKS cluster
      - name: Update a kubeconfig file
        env:
          AWS_EKS_CLUSTER_NAME: "movie-picture"
        run: |
          aws sts get-caller-identity
          aws eks update-kubeconfig --region "us-east-1" --name $AWS_EKS_CLUSTER_NAME
          kubectl config current-context
          kubectl get svc
      
      # Login to Amazon ECR Private
      - name: Login to Amazon ECR
        id: login-ecr-deploy
        uses: aws-actions/amazon-ecr-login@v2
      
      # Apply the manifests to the cluster
      - name: Apply the manifests to the cluster
        env:
          ECR_REGISTRY: ${{ steps.login-ecr-deploy.outputs.registry }}
          ECR_REPOSITORY: "movie-picture-frontend"
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd ./starter/frontned/k8s
          kustomize edit set image frontend=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          kustomize build | kubectl apply -f -
