name: ci-frontend-workflow

on:
  # Manual trigger using the workflow_dispatch event
  workflow_dispatch:

  # Automatic trigger on pull request events targeting the main branch
  pull_request:
    branches:
      - main
      
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint: 
    runs-on: ubuntu-latest
    steps:
      # Check out the code from the repository.
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up a Node.js environment with caching.
      - name: Set up Node.js 
        uses: actions/setup-node@v4
        with:
          node-version: latest
          cache: 'npm'
          cache-dependency-path: './starter/frontend/package-lock.json'

      # Install the dependencies.
      - name: Install dependencies
        run: cd starter/frontend && npm ci

      # Run the linter.
      - name: Running linter
        run: cd starter/frontend && npm run lint
  
  test:
    runs-on: ubuntu-latest
    steps:
      # Check out the code from the repository.
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up a Node.js environment with caching.
      - name: Set up Node.js 
        uses: actions/setup-node@v4
        with:
          node-version: latest
          cache: 'npm'
          cache-dependency-path: './starter/frontend/package-lock.json'

      # Install the dependencies.
      - name: Install dependencies
        run: cd starter/frontend && npm ci

      # Run the tests.
      - name: Running test
        run: cd starter/frontend && npm run test

  build-and-push:
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
    - name: Checkout repo
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{secrets.AWS_SESSION_TOKEN}}
        aws-region: us-east-1
    
    - name: Login to Amazon ECR Public
      id: login-ecr-public
      uses: aws-actions/amazon-ecr-login@v2
      with:
        registry-type: public
        
    - name: Build, tag, and push docker image to Amazon ECR Public
      env:
        REGISTRY: ${{ steps.login-ecr-public.outputs.registry }}
        REGISTRY_ALIAS: my-ecr-public-registry-alias
        REPOSITORY: my-ecr-public-repo
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build --build-arg=REACT_APP_MOVIE_API_URL=${{ vars.APP_MOVIE_API_URL }} \
                    -t $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE_TAG .
        docker push $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE_TAG

  deploy:
    name: 'Using Terraform'
    runs-on: ubuntu-latest
  
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{secrets.AWS_SESSION_TOKEN}}
          aws-region: us-east-1
  
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
  
      - name: Terraform Initialize
        run: terraform init
  
      - name: Terraform Validate
        run: terraform validate 
  
      - name: Terraform Plan
        run: terraform plan 
        continue-on-error: true
  
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve
  
      - name: Terraform Destroy
        run:  terraform plan -destroy
